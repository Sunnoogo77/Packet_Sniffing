
------------------ capture/capture.py : 
# Script de capture avec Scapy

# Il sagit ici d'un code juste pour creer la mabranche celle de sniffing ( pour la g√©n√©rations des donn√©s )

from scapy.all import  sniff, IP, TCP, UDP, DNS, get_if_list
from datetime import datetime
import sys
import os
#D√©finition du repertoire o√π stocker les fichiers .pcap
PCAP_DIR = os.path.abspath(os.path.join(os.path.dirname(__file__), "..", "pcap_files"))  # ‚úÖ Correct


#S'assurer que le dossiers existe
os.makedirs(PCAP_DIR, exist_ok=True)

# Get the absolute path to the project root (Packet_Sniffing)
project_root = os.path.abspath(os.path.join(os.path.dirname(__file__), "..", "..")) 
sys.path.insert(0, project_root)

from src.storage.insert_data import insert_packet, insert_known_device, insert_visited_site 



def analyse_packet(packet):
    """ Analyser et envoyer les donn√©s √† Supabase """
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    if packet.haslayer(IP):
        src_ip = packet[IP].src
        dst_ip = packet[IP].dst
        src_mac = packet.src if hasattr(packet, "src") else None
        dst_mac = packet.dst if hasattr(packet, "dst") else None
        protocol = packet[IP].proto
        data_size = len(packet)
        
        if packet.haslayer(TCP):
            src_port = packet[TCP].sport
            dst_port = packet[TCP].dport
            
            site_visited = None
            if packet.haslayer(DNS) and packet[DNS].qr == 0:
                try:
                    site_visited = packet[DNS].qd.qname.decode("utf-8")
                    insert_visited_site(src_ip, site_visited)
                except:
                    pass
                
            data = {
                "timestamp": timestamp,
                "src_ip": src_ip,
                "dst_ip": dst_ip,
                "src_mac": src_mac,
                "dst_mac": dst_mac,
                "protocol": protocol,
                "src_port": src_port,
                "dst_port": dst_port,
                "site_visited": site_visited,
                "data_size": data_size
            }
            
            insert_packet(data)    
            
            if src_mac:
                insert_known_device(src_mac, src_ip)

def main():
    """Configuration de l'utilisateur et d√©marrage du sniffing."""
    print("üîπ Configuration de la capture r√©seau")

    interface = input("üì° Entrez l'interface r√©seau (ex: wlan0, eth0) : ")
    packet_count = int(input("üîç Entrez le nombre de paquets √† analyser avec Scapy : "))

    print("\n\tüöÄ D√©marrage du sniffing Scapy...")
    sniff(iface=interface, prn=analyse_packet, count=packet_count, store=10)

if __name__ == "__main__":
    print("-----------------\n")
    main()




------------------ storage/db.py:
    # Connexion PostgreSQL
import os
from dotenv import load_dotenv
from supabase import create_client
from src.storage.models import TABLES

load_dotenv()

SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_KEY")

supabase = create_client(SUPABASE_URL, SUPABASE_KEY)


def insert_into_table(table_name, data):
    """Ins√©rer les donn√©es dans la base PostgreSQL Supabase"""
    
    try:
        supabase.table(table_name).insert(data).execute()    
        print("\n\t‚úÖ Donn√©es ins√©r√©es avec succ√®s")
    except Exception as e:
        print(f"\n\t‚ùå Erreur d'insertion des donn√©es: {e}")

def fetch_data(table_name, limit=10, conditions=None):
    """R√©cup√®re des donn√©es d'une table avec des conditions facultatives."""
    try:
        query = supabase.table(table_name).select("*").limit(limit)
        
        # Appliquer les conditions si elles existent
        if conditions:
            for key, value in conditions.items():
                query = query.eq(list(conditions.keys())[0], list(conditions.values())[0])

        response = query.execute()
        return response
    except Exception as e:
        print(f"‚ùå Erreur lors de la r√©cup√©ration des donn√©es de {table_name} : {e}")
        return None


        
------------------ storage/insert_data.py :
import socket


from src.storage.db import insert_into_table, fetch_data
from src.storage.models import TABLES

def get_hostname(ip_adrr):
    """Essaie de r√©cup√©rer le hostname via une requ√™te DNS inverse"""
    try:
        hostname = socket.gethostbyaddr(ip_adrr)[0]
        return hostname
    except socket.herror:
        return "UNKNOWN"

def insert_packet(data):
    """Ins√®re un packet r√©seau dans la table realtime_traffic"""
    insert_into_table(TABLES["realtime_traffic"], data)

def insert_known_device(mac_address, ip_address):
    """Ajoute un appareil d√©tect√© dans known_devices uniquement s'il n'existe pas d√©j√†."""

    existing_device = fetch_data(TABLES["known_devices"], conditions={"mac_address": mac_address})
    
    if existing_device :
        print(f"‚ö†Ô∏è L'appareil {mac_address} existe d√©j√† dans la base.")
        return
    
    hostname = get_hostname(ip_address)
    data = {
        "mac_address": mac_address,
        "ip_address": ip_address,
        "hostname": hostname
    }
    insert_into_table(TABLES["known_devices"], data)


def insert_visited_site(src_ip, domain):
    """Ajoute un site vsit√© dasn visited_sites"""
    data = {
        "src_ip": src_ip,
        "domain": domain
    }
    insert_into_table(TABLES["visited_sites"], data)


       
---------------- storage/models.py : 
# Sch√©ma des tables SQL
TABLES = {
    "realtime_traffic": "realtime_traffic",
    "known_devices": "known_devices",
    "visited_sites": "visited_sites"
}
